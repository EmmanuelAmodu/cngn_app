// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

enum Status {
  pending
  processing
  completed
  failed
  queued
}

model VirtualAccount {
  userAddress   String    @id @map("user_address")
  accountName   String    @map("account_name")
  accountNumber String    @map("account_number")
  bankName      String    @map("bank_name")
  reference     String
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  onramps       Onramp[]
}

model Onramp {
  onrampId         String         @id @map("onramp_id")
  userAddress      String         @map("user_address")
  amount           Int
  chainId          Int?           @map("chain_id")
  onChainTx        String?        @map("on_chain_tx")
  status           Status         @default(pending)
  paymentReference String         @unique @map("payment_reference")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at")

  // Relations
  user VirtualAccount @relation(fields: [userAddress], references: [userAddress])

  @@index([userAddress], name: "idx_onramps_user_address")
}

model Offramp {
  offrampId             String    @id @map("offramp_id")
  userAddress           String    @map("user_address")
  bankAccount           String    @map("bank_account")
  bankCode              String    @map("bank_code")
  chainId               Int       @map("chain_id")
  onChainTx             String?   @map("on_chain_tx")
  bankTransferReference String?   @unique @map("bank_transfer_reference")
  recipientId           String    @map("recipient_id")
  amount                Int
  status                Status    @default(pending)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([userAddress], name: "idx_offramps_user_address")
  @@index([status], name: "idx_offramps_status")
}

model Bridge {
  bridgeId           String    @id @map("bridge_id")
  userAddress        String    @map("user_address")
  amount             Int
  sourceChainId      Int       @map("source_chain_id")
  destinationChainId Int       @map("destination_chain_id")
  sourceTxHash       String?   @map("source_tx_hash")
  destinationTxHash  String?   @map("destination_tx_hash")
  status             Status    @default(pending)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([userAddress], name: "idx_bridges_user_address")
  @@index([status], name: "idx_bridges_status")
}
