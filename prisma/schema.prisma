// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

enum Status {
  pending
  processing
  completed
  failed
  queued
}

enum TransactionType {
  onramp
  offramp
  bridge
}

enum Currency {
  NGN
  USD
  KES
  EUR
  GBP
}

model User {
  address     String    @id @map("address")
  email       String   @unique
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  mobileNumber String  @unique @map("mobile_number")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  transactions    Transaction[]
  virtualAccounts VirtualAccount[]
}

model VirtualAccount {
  id            String      @id @default(cuid())
  userAddress   String
  accountNumber String
  accountName   String
  bankName      String
  routingNumber String?     @map("routing_number")
  reference     String?
  currency      Currency    @default(NGN)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          User        @relation(fields: [userAddress], references: [address], onDelete: Cascade)
  transactions  Transaction[]

  @@unique([userAddress, currency], name: "unique_user_currency")
  @@index([userAddress])
}

model Transaction {
  id                    String         @id @map("transaction_id")
  type                  TransactionType
  userAddress           String         @map("user_address")
  amount                Int
  currency              Currency
  status                Status         @default(pending)
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @default(now()) @updatedAt @map("updated_at")

  // Onramp specific fields
  paymentReference      String?        @unique @map("payment_reference")
  chainId               Int?           @map("chain_id")
  onChainTx             String?        @map("on_chain_tx")

  // Offramp specific fields
  bankAccount           String?        @map("bank_account")
  bankCode              String?        @map("bank_code")
  bankTransferReference String?        @unique @map("bank_transfer_reference")
  recipientId           String?        @map("recipient_id")

  // Bridge specific fields
  sourceChainId         Int?           @map("source_chain_id")
  destinationChainId    Int?           @map("destination_chain_id")
  sourceTxHash          String?        @map("source_tx_hash")
  destinationTxHash     String?        @map("destination_tx_hash")

  // Relations
  user                  User           @relation(fields: [userAddress], references: [address], map: "Transaction_user_fkey")
  virtualAccount        VirtualAccount? @relation(fields: [userAddress, currency], references: [userAddress, currency], map: "Transaction_virtual_account_fkey")

  @@index([userAddress], name: "idx_transactions_user_address")
  @@index([status], name: "idx_transactions_status")
  @@index([type], name: "idx_transactions_type")
  @@index([currency], name: "idx_transactions_currency")
}
